/*
 * https://github.com/zmkfirmware/zmk/blob/main/app/include/dt-bindings/zmk/keys.h
 */

#include "zmk-nodefree-config/helper.h"
#include "zmk-nodefree-config/keypos_def/keypos_36keys.h"

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DEF 0
#define NUMSYM 1
#define FUNNAV 2
#define SYS 3
// #define GMG 4

#define XXX &none
#define ___ &trans

#define QUICK_TAP_MS 175

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4  /* left hand  */
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4  /* right hand */
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                      /* thumbs     */

// ---------- SETTINGS ----------

&sk {  // sticky-key config
    release-after-ms = <1000>; // release after 1s
    quick-release;             // no double capitalization when rolling keys
};

&sl {  // sticky-layer config
    ignore-modifiers;          // allow chording sticky mods & layers
};

&lt {  // layer-tap config
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
};

// ----------- COMBOS -----------
#undef COMBO_HOOK
#define COMBO_HOOK require-prior-idle-ms = <150>;
#define COMBO_TERM_FAST 25
#define COMBO_TERM_SLOW 50

// left and right brace { }
ZMK_COMBO(lbrc, &kp LBRC, RT1 RT2, DEF NUMSYM, COMBO_TERM_FAST)
ZMK_COMBO(rbrc, &kp RBRC, RT2 RT3, DEF NUMSYM, COMBO_TERM_FAST)

// left and right bracket [ ]
ZMK_COMBO(lbkt, &kp LBKT, RT0 RT1, DEF NUMSYM, COMBO_TERM_FAST)
ZMK_COMBO(rbkt, &kp RBKT, RT3 RT4, DEF NUMSYM, COMBO_TERM_FAST)

// left and right parenthesis ( )
ZMK_COMBO(lpar, &kp LPAR, RM1 RM2, DEF NUMSYM, COMBO_TERM_FAST)
ZMK_COMBO(rpar, &kp RPAR, RM2 RM3, DEF NUMSYM, COMBO_TERM_FAST)

// tilde ~
ZMK_COMBO(tilde, &kp TILDE, LM3 LM2, DEF, COMBO_TERM_FAST)
// MINUS -
ZMK_COMBO(minus, &kp MINUS, LM2 LM1, DEF, COMBO_TERM_FAST)


// left and right less-then and greater-then < >
ZMK_COMBO(lt, &kp LT, LT3 LT2, DEF, COMBO_TERM_FAST)
ZMK_COMBO(gt, &kp GT, LT2 LT1, DEF, COMBO_TERM_FAST)

// forward and backward slash \ /
ZMK_COMBO(backslash, &kp BACKSLASH, LB3 LB2, DEF, COMBO_TERM_FAST)
ZMK_COMBO(slash, &kp SLASH, LB2 LB1, DEF, COMBO_TERM_FAST)

ZMK_COMBO(under, &kp UNDER, RB1 RB2, DEF NUMSYM, COMBO_TERM_FAST)
ZMK_COMBO(equal, &kp EQUAL, RB2 RB3, DEF NUMSYM, COMBO_TERM_FAST)

// // macOS shift space left and right
// ZMK_COMBO(workspace_left,  &kp LC(LEFT),  LM3 LM2, NUM FUN, COMBO_TERM_FAST)
// ZMK_COMBO(workspace_right, &kp LC(RIGHT), LM2 LM1, NUM FUN, COMBO_TERM_FAST)

// left and right arrow '->'
ZMK_BEHAVIOR(larr, macro,
    wait-ms = <0>;
    tap-ms = <5>;
    bindings = <&kp LT &kp MINUS>;
)
ZMK_BEHAVIOR(rarr, macro,
    wait-ms = <0>;
    tap-ms = <5>;
    bindings = <&kp MINUS &kp GT>;
)
ZMK_COMBO(left_arrow,  &larr, LM4 LM3, DEF, COMBO_TERM_FAST)
ZMK_COMBO(right_arrow, &rarr, LM1 LM0, DEF, COMBO_TERM_FAST)


// ----------- KEYMAP -----------

// Cross-hand only home row mods
#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
    ZMK_BEHAVIOR(NAME, hold_tap, \
        flavor = "balanced"; \
        tapping-term-ms = <280>; \
        quick-tap-ms = <QUICK_TAP_MS>; \
        require-prior-idle-ms = <150>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
        hold-trigger-on-release; \
    )
MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS)  // left-hand HRMs
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS)  // right-hand HRMs

// tap: sticky shift | shift + tap or double-tap: caps word | hold: navigation layer
#define smart_shift smart_shift_inner SYM 0
ZMK_BEHAVIOR(smart_shift_inner, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
    bindings = <&mo>, <&shift_word>;
)
ZMK_BEHAVIOR(shift_word, mod_morph,
    bindings = <&sk LSHFT>, <&caps_word>;
    mods = <MOD_LSFT>;
)

// tap: backspace | lshft + tap: delete | rshft + tap: shift-delete
ZMK_BEHAVIOR(bs_del, mod_morph,
    bindings = <&kp BSPC>, <&kp DEL>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
    /* keep-mods = <MOD_RSFT>; */
)

// reuse basic mod-morph scheme
#define SIMPLE_MORPH(NAME, MOD, BINDING1, BINDING2) \
    ZMK_BEHAVIOR(NAME, mod_morph, \
        mods = <(MOD_L ## MOD|MOD_R ## MOD)>; \
        bindings = <BINDING1>, <BINDING2>; \
    )

// tap: colon | shift + tap: semicolon
SIMPLE_MORPH(semi_colon, SFT, &kp SEMI, &kp COLON)

// tap: plus | shift + tap: equal
SIMPLE_MORPH(plus_equal, SFT, &kp PLUS, &kp EQUAL)

// tap: ' | shift + tap: "
SIMPLE_MORPH(quotes, SFT, &kp APOS, &kp DOUBLE_QUOTES)

// tap: - | shift + tap: _
SIMPLE_MORPH(hyphen_under, SFT, &kp MINUS, &kp UNDER)

// tap: ` | shift + tap: ~
SIMPLE_MORPH(grave_tilde, SFT, &kp GRAVE, &kp TILDE)

// tap: ` | shift + tap: ~
SIMPLE_MORPH(slash_ques, SFT, &kp SLASH, &kp QMARK)

// tap: . | shift + tap: :
SIMPLE_MORPH(dot_colon, SFT, &kp DOT, &kp COLON)

// tap: , | shift + tap: ;
SIMPLE_MORPH(comma_semi, SFT, &kp COMMA, &kp SEMI)

// tap: space | shift + tap: dot -> space -> sticky shift | hold: space
SIMPLE_MORPH(smart_space, SFT, &kp SPACE, &dot_space)
ZMK_BEHAVIOR(dot_space, macro,
    wait-ms = <0>;
    tap-ms = <5>;
    bindings = <&kp DOT &kp SPACE &sk LSHFT>;
)

// double-tap to enter bootloader
ZMK_BEHAVIOR(boot, tap_dance,
    bindings = <&none>, <&bootloader>;
)
   
ZMK_LAYER(ColemakDH,
// ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
        &kp Q         &kp W         &kp F         &kp P         &kp B             &kp J         &kp L         &kp U         &kp Y        &quotes
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &hml LGUI A   &hml LALT R  &hml LCTRL S  &hml LSHFT T      &kp G             &kp M     &hmr RSHFT N  &hmr RCTRL E   &hmr RALT I   &hmr RGUI O
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
        &kp Z         &kp X         &kp C         &kp D         &kp V             &kp K         &kp H      &comma_semi   &dot_colon    &slash_ques
// ╰─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────╯
                                 &lt SYS ESC &lt FUNNAV SPACE &lt NUMSYM TAB &lt NUMSYM ENTER  &lt FUNNAV BSPC  &lt SYS DEL
//                             ╰─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────╯
)

ZMK_LAYER(NumSym,
// ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
      &kp SLASH      &kp N7        &kp N8        &kp N9     &kp MINUS          &kp TILDE     &kp AMPS       &kp STAR      &kp PIPE     &kp GRAVE
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
      &kp STAR      &kp N4         &kp N5        &kp N6      &kp PLUS          &kp BACKSLASH   &kp DOLLAR   &kp PERCENT    &kp CARET     &kp COLON
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
       &kp N0        &kp N1        &kp N2        &kp N3        &kp DOT          &kp QMARK     &kp EXCL        &kp AT      &kp HASH       &kp SEMI
// ╰─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────╯
                                     ___           ___           ___              ___           ___           ___
//                             ╰─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────╯
)



ZMK_LAYER(FunNav,
// ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
       &kp F12         &kp F7      &kp F8         &kp F9         XXX           &kp PG_UP     &kp HOME       &kp UP        &kp END     &kp PSCRN
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
       &kp F11         &kp F4      &kp F5         &kp F6         XXX           &kp PG_DN     &kp LEFT      &kp DOWN      &kp RIGHT       XXX         
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
       &kp F10          &kp F1     &kp F2         &kp F3         XXX            &kp LC(Z)     &kp LC(C)     &kp LC(V)    &kp LC(X)     &kp LC(Y) 
// ╰─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────╯
                                     ___           ___           ___              ___           ___           ___
//                             ╰─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────╯
)


ZMK_LAYER(System,
// ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
        &boot      &kp C_PREV    &kp C_NEXT     &kp C_PP         XXX           &kp C_SLEEP &kp LG(LS(LEFT)) &kp LG(UP)  &kp LG(LS(RIGHT))  &boot
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    &kp C_BRI_INC  &kp C_MUTE   &kp C_VOL_DN  &kp C_VOL_UP       XXX           &kp C_AL_LOCK &kp LG(LEFT)  &kp LG(DOWN)  &kp LG(RIGHT)     XXX
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    &kp C_BRI_DEC  &bt BT_CLR    &bt BT_PRV    &bt BT_NXT        XXX               XXX      &kp LC(LS(C)) &kp LC(LS(V))  &kp LC(LA(LEFT)) &kp LC(LA(RIGHT))
// ╰─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────╯
                                     XXX           XXX           XXX               XXX           XXX           XXX
//                             ╰─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────╯
)

// ZMK_LAYER(Gaming,
// // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
//         &kp Q         &kp W         &kp F         &kp P         &kp B             &kp J         &kp L         &kp U         &kp Y         &kp APOS
// // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
//      &hml LGUI A   &hml LALT R  &hml LCTRL S  &hml LSHFT T      &kp G             &kp M     &hmr RSHFT N  &hmr RCTRL E   &hmr RALT I   &hmr RGUI O
// // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
//         &kp Z         &kp X         &kp C         &kp D         &kp V             &kp K         &kp H       &kp COMMA      &kp DOT      &kp SLASH
// // ╰─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────╯
//                                    &kp ESC    &smart_space    &smart_tab      &lt FUN ENTER    &bs_del     &shift_word
// //                             ╰─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────╯
// )

// ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
//       XXX           XXX           XXX           XXX           XXX               XXX           XXX           XXX           XXX           XXX
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
//       XXX           XXX           XXX           XXX           XXX               XXX           XXX           XXX           XXX           XXX
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
//       XXX           XXX           XXX           XXX           XXX               XXX           XXX           XXX           XXX           XXX
// ╰─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────╯
//                                   XXX           XXX           XXX               XXX           XXX           XXX
//                             ╰─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────╯

// vim: filetype=c
